# run_jsnapy_tests/tests/test_bgp_health.yml

test_metadata:
  description: "Validates BGP neighbor state, uptime, and flap count."
  category: "Routing & BGP"
  production_approved: true
  display_hints:
    type: "table"
    data_key: "bgp_peers"
    columns:
      - header: "Peer Address"
        accessor: "peer-address"
      - header: "State"
        accessor: "peer-state"
      - header: "Flaps"
        accessor: "flap-count"
      - header: "Last Event"
        accessor: "last-event"

tests_include:
  - check_bgp_peers_exist
  - check_bgp_peer_details

# We split the test into two parts for clarity and robustness.

check_bgp_peers_exist:
  - rpc: get-bgp-summary-information
  - xpath: /bgp-information/bgp-peer
    # --- THIS IS THE CORRECTED SYNTAX ---
    - count-is-greater-than: 0
      err: "❌ NO BGP PEERS: No BGP neighbors are configured on this device."
      info: "✅ BGP PEERS FOUND: Found {{post['count']}} BGP neighbors to check."

check_bgp_peer_details:
  # This block will only effectively run if peers exist.
  - rpc: get-bgp-neighbor-information
  - iterate:
      xpath: '/bgp-information/bgp-peer'
      id: 'peer-address'
      tests:
        - is-equal: peer-state, Established
          err: "❌ BGP DOWN: Neighbor {{post['peer-address']}} is in state <{{post['peer-state']}}>"
          info: "✅ BGP UP: Neighbor <{{post['peer-address']}}> is Established"

        - is-lte: flap-count, 5
          err: "❌ BGP UNSTABLE: Neighbor {{post['peer-address']}} has flapped {{post['flap-count']}} times!"
          info: "✅ BGP STABLE: Neighbor <{{post['peer-address']}} flap count is low ({{post['flap-count']}})"
