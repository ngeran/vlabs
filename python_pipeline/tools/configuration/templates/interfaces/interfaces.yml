# =================================================================================================
# CONFIGURATION TEMPLATES FILE: templates.yml
#
# PURPOSE:
#   - Defines Jinja2 templates for generating device configurations in the template_workflow script.
#   - Specifies template metadata (id, name, category, description) and parameters for rendering in
#     UniversalTemplateForm.jsx and DeviceConfigurationRunner.jsx.
#   - Supports dynamic options for select fields via dynamicOptionsEndpoint, compatible with ModernDropdown.jsx.
#   - Organizes templates by category for display in the TemplateAccordionMenu sidebar.
#
# OVERVIEW:
#   This file contains templates for Juniper device configurations (e.g., interfaces, BGP, OSPF).
#   Each template includes parameters with types (text, number, select, enum), validation rules,
#   and optional dynamic options fetched from API endpoints. The templates are fetched via the
#   /api/templates/list endpoint and displayed in a categorized sidebar.
#
# KEY FEATURES:
#   - Template Organization: Groups templates by category (e.g., Interface, Routing) for sidebar display.
#   - Parameter Types: Supports text, number, select, and enum with validation (regex, min/max).
#   - Dynamic Options: Uses dynamicOptionsEndpoint for fetching options (e.g., interfaces, policies).
#   - Validation: Includes regex patterns and min/max constraints for robust input validation.
#   - Compatibility: Aligns with UniversalTemplateForm.jsx and ModernDropdown.jsx for UI rendering.
#
# HOW-TO GUIDE (INTEGRATION):
#   - Place in the appropriate directory (e.g., python_pipeline/tools/configuration/templates.yml).
#   - Ensure backend API (http://localhost:3001) supports dynamicOptionsEndpoint (e.g., /api/interfaces).
#   - Verify template_file paths (e.g., interface.j2, bgp.j2) exist in the backend template directory.
#   - Test with DeviceConfigurationRunner.jsx:
#     - Navigate to Configuration Templates in the UI.
#     - Verify templates appear in the sidebar under their categories.
#     - Check that parameters (including select/enum) render correctly in UniversalTemplateForm.jsx.
#     - Test dynamic options by selecting templates with dynamicOptionsEndpoint.
#   - Update parameters as needed to support additional template types or validation rules.
#
# DEPENDENCIES:
#   - Backend API: Must support /api/templates/list and dynamicOptionsEndpoint routes.
#   - Jinja2 Templates: Referenced template_file (e.g., interface.j2) must exist.
#   - UI Components: DeviceConfigurationRunner.jsx, UniversalTemplateForm.jsx, ModernDropdown.jsx.
#
# =================================================================================================

templates:
  # -------------------------------------------------------------------------------------------------
  # TEMPLATE: Interface Configuration
  # -------------------------------------------------------------------------------------------------
  - id: "interface_config"
    name: "Interface Configuration"
    description: "Configure physical and logical interfaces on Juniper devices."
    category: "Interface"
    template_file: "interfaces.j2"
    parameters:
      - name: "interface_name"
        label: "Interface Name"
        type: "text"
        required: true
        #dynamicOptionsEndpoint: "/api/interfaces"
        description: "Select the physical or logical interface to configure."
      - name: "description"
        label: "Description"
        type: "text"
        required: false
        placeholder: "e.g., Link to Router A"
        description: "Optional description for the interface."
      - name: "ip_address"
        label: "IP Address"
        type: "text"
        required: true
        placeholder: "e.g., 192.168.1.1/24"
        # CORRECTION: Changed 'validation' to 'regex' to match the component's implementation.
        regex: "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$"
        description: "The IP address and subnet mask (e.g., 192.168.1.1/24)."
      - name: "vlan_id"
        label: "VLAN ID"
        type: "number"
        required: false
        min: 1
        max: 4094
        description: "Optional VLAN ID for the interface (1-4094)."
      - name: "mtu"
        label: "MTU"
        type: "number"
        required: false
        # CORRECTION: Changed 'default' to 'default_value' to match the component's implementation.
        default_value: 1500
        min: 68
        max: 9192
        description: "Maximum Transmission Unit (68-9192 bytes)."
      - name: "interface_mode"
        label: "Interface Mode"
        type: "enum"
        required: false
        options:
          - { value: "access", label: "Access Mode" }
          - { value: "trunk", label: "Trunk Mode" }
        description: "Select the interface mode (access or trunk)."
